{"version":3,"sources":["features/Slices/isModalSlice.ts","features/Slices/isNextSlice.ts","features/Slices/playerNameSlice.ts","features/Slices/squareSlice.ts","features/Reducers/index.ts","app/store.ts","serviceWorker.ts","features/Actions/index.ts","features/Selector/index.ts","app/hooks.ts","app/CustomHooks/useWinner.ts","components/WinnerHelper/index.ts","components/Square/square.styled-components.ts","components/Square/index.tsx","components/Board/board-styles-components.ts","components/Board/index.tsx","components/Game/Game-styled-components.ts","components/Game/modal.tsx","components/Game/scoreBoard.tsx","components/Game/index.tsx","app/CustomHooks/usePlayerName.ts","components/Home/home-styled-components.ts","GlobalStyle.ts","index.tsx","components/Home/home.tsx"],"names":["isModalSlice","createSlice","name","initialState","isModal","reducers","setIsModal","state","isNextSlice","isNext","setIsNext","resetIsNext","action","payload","playerNameSlice","playerName","setPlayerName","squares","Array","fill","squareSlice","squareData","isNextReducer","reducer","squareReducer","isModalReducer","playerNameReducer","store","configureStore","Boolean","window","location","hostname","match","actions","selector","useAppSelector","useSelector","useWinner","useState","scoreOfPlayer1","setScoreOfPlayer1","scoreOfPlayer2","setScoreOfPlayer2","winnerName","setWinnerName","dispatch","useDispatch","data","lines","i","length","a","b","c","winner","indexes","includes","CalculateWinner","currentPlayerValue","currentPlayerName","useEffect","prev","setTimeout","ButtonSquare","styled","button","props","isWinnerSquare","Square","value","handleSquareClick","onClick","BoardRow","div","Board","map","index","GameContainer","StatusOfCurrentPlayer","ChangePlayer","ChangePlayerButton","BoardContainer","ModalContainer","ModalContent","ScoreContainer","ScoreTitle","h4","ScoreParagraph","p","CongratulationMessage","ModalFooter","ModalButtons","ContinueButton","ResetButton","QuitButton","Modal","handleContinueClick","handleResetClick","className","href","ScoreBoard","Game","getPlayerNameInLocalStorate","localStorage","getItem","usePlayerName","currentSquare","slice","HomeContainer","HomeContent","Select","select","SelectBtnContainer","SelectButton","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","exact","path","component","history","setName","htmlFor","onChange","e","target","id","setItem","push","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea388f43.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport interface initialStateType{\r\n    isModal: boolean;\r\n}\r\n\r\nconst initialState : initialStateType = {\r\n    isModal: false\r\n}\r\n\r\n\r\nexport const isModalSlice = createSlice({\r\n    name: 'isModal',\r\n    initialState,\r\n    reducers: {\r\n        setIsModal(state) {\r\n            state.isModal = !state.isModal\r\n        }\r\n    }\r\n})\r\n\r\n\r\n\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface initialStateType{\r\n    isNext: boolean;\r\n}\r\n\r\nconst initialState : initialStateType = {\r\n    isNext: true\r\n}\r\n\r\n\r\nexport const isNextSlice = createSlice({\r\n    name: 'isNext',\r\n    initialState,\r\n    reducers: {\r\n        setIsNext(state) {\r\n            state.isNext = !state.isNext\r\n        },\r\n\r\n        resetIsNext(state , action : PayloadAction<boolean>) {\r\n            state.isNext = action.payload\r\n        }\r\n    }\r\n})\r\n\r\n\r\n\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface initialStateType{\r\n    playerName: string | null;\r\n}\r\n\r\nconst initialState : initialStateType = {\r\n    playerName : ''\r\n}\r\n\r\n\r\n\r\nexport const playerNameSlice = createSlice({\r\n    name: 'player',\r\n    initialState,\r\n    reducers: {\r\n        setPlayerName(state , action : PayloadAction<string | null> ){\r\n            state.playerName = action.payload\r\n        }\r\n    }\r\n})\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface initialStateType{\r\n    squares: string[];\r\n}\r\n\r\nconst initialState : initialStateType = {\r\n    squares : Array(9).fill(null)\r\n}\r\n\r\nexport const squareSlice = createSlice({\r\n    name: 'square',\r\n    initialState,\r\n    reducers: {\r\n        squareData (state , action : PayloadAction<string[]>){\r\n            state.squares = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\n","import { isModalSlice } from \"../Slices/isModalSlice\";\r\nimport { isNextSlice } from \"../Slices/isNextSlice\";\r\nimport { playerNameSlice } from \"../Slices/playerNameSlice\";\r\nimport { squareSlice } from \"../Slices/squareSlice\";\r\n\r\n\r\n\r\nexport const isNextReducer = isNextSlice.reducer;\r\nexport const squareReducer = squareSlice.reducer;\r\nexport const isModalReducer = isModalSlice.reducer;\r\nexport const playerNameReducer = playerNameSlice.reducer;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { isModalReducer, isNextReducer, playerNameReducer, squareReducer } from '../features/Reducers';\n\n\n\nexport const store = configureStore({\n  reducer: {\n    squares: squareReducer,\n    isNext: isNextReducer,\n    isModal: isModalReducer,\n    playerName: playerNameReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { isModalSlice } from \"../Slices/isModalSlice\";\r\nimport { isNextSlice } from \"../Slices/isNextSlice\";\r\nimport { playerNameSlice } from \"../Slices/playerNameSlice\";\r\nimport { squareSlice } from \"../Slices/squareSlice\";\r\n\r\nexport const { setIsNext , resetIsNext } = isNextSlice.actions;\r\nexport const { squareData } = squareSlice.actions;\r\nexport const { setIsModal } = isModalSlice.actions;\r\nexport const { setPlayerName } = playerNameSlice.actions;\r\n","import { RootState } from \"../../app/store\";\r\n\r\nexport const selector = (state: RootState) => state;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useEffect, useState } from \"react\";\r\nimport { CalculateWinner } from \"../../components/WinnerHelper\";\r\nimport { setIsModal } from \"../../features/Actions\";\r\nimport { selector } from \"../../features/Selector\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\n\r\n\r\nexport const useWinner = () => {\r\n    const [scoreOfPlayer1, setScoreOfPlayer1] = useState(0);\r\n    const [scoreOfPlayer2, setScoreOfPlayer2] = useState(0);\r\n    const [winnerName, setWinnerName] = useState<string | null>(\"\");\r\n    const dispatch = useAppDispatch();\r\n    const data = useAppSelector(selector);\r\n    //get #ts data in the store\r\n    const {\r\n        squares: { squares },\r\n        isNext: { isNext },\r\n        isModal: { isModal },\r\n        playerName: { playerName }\r\n    } = data;\r\n\r\n  //get a winner value and get the array of 3 correct indexes\r\n  const {winner , indexes} = CalculateWinner(squares);\r\n  //change the value if it's true or false\r\n  let currentPlayerValue = isNext ? \"X\" : \"O\";\r\n  //change the name\r\n  let currentPlayerName = isNext ? 'Player 1' : playerName;\r\n  \r\n    useEffect(() => {\r\n      if (winner && winner !== 'draw') {\r\n          //check who wins and increment his score by 1\r\n          winner === \"X\"\r\n            ? setScoreOfPlayer1((prev) => prev + 1)\r\n          : setScoreOfPlayer2((prev) => prev + 1);\r\n        //check who wins and set his name for congratulation\r\n        winner === \"X\" ? setWinnerName(\"Player 1\") : setWinnerName(playerName);\r\n        //wait after 3 s and set Modal to true\r\n          setTimeout(() => {\r\n            dispatch(setIsModal());\r\n          }, 3000);\r\n        \r\n      } else if (winner && winner === 'draw') {\r\n        //no winner\r\n        setWinnerName('both players. No winner');\r\n        //set modal in 3 s\r\n          setTimeout(() => {\r\n            dispatch(setIsModal());\r\n          }, 3000);\r\n        } else {\r\n          \r\n        }\r\n      }, [winner , dispatch , playerName]);\r\n\r\n    return {\r\n        scoreOfPlayer1,\r\n        scoreOfPlayer2,\r\n        setScoreOfPlayer1,\r\n        setScoreOfPlayer2,\r\n        winnerName,\r\n        winner,\r\n        dispatch,\r\n        squares,\r\n        isModal,\r\n        currentPlayerValue,\r\n        indexes,\r\n        currentPlayerName\r\n    }\r\n}","export function CalculateWinner(squares: any) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return {\r\n          winner: squares[a],\r\n          indexes : lines[i]\r\n        };\r\n      } else if (!squares.includes(null)) {\r\n        return {\r\n          winner: 'draw',\r\n          indexes: []\r\n        };\r\n      }\r\n    }\r\n  return {\r\n      winner : null,\r\n      indexes: []\r\n    };\r\n  }\r\n","import styled from 'styled-components'\r\n\r\ninterface BtnProps{\r\n    isWinnerSquare: boolean;\r\n}\r\n\r\nexport const ButtonSquare = styled.button<BtnProps>\r\n    `\r\n  outline: none;\r\n  border: none;\r\n  font-size: 100px;\r\n  background-color: #414159;\r\n  color: #a3a1ae;\r\n  position: relative;\r\n  &::before {\r\n    content: '';\r\n    height: 100%;\r\n    width: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: auto;\r\n    background-color: ${props => props.isWinnerSquare ? '#ad3d3a' : 'transparent'};\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n  }\r\n`","import { ButtonSquare } from \"./square.styled-components\";\r\n\r\nexport interface SquarePropType {\r\n  value: string;\r\n  handleSquareClick: () => void;\r\n  isWinnerSquare: boolean;\r\n}\r\n\r\nexport default function Square({\r\n  value,\r\n  handleSquareClick,\r\n  isWinnerSquare,\r\n}: SquarePropType) {\r\n  return (\r\n    <ButtonSquare isWinnerSquare={isWinnerSquare} onClick={handleSquareClick}>\r\n      {value}\r\n    </ButtonSquare>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const BoardRow = styled.div\r\n    `\r\n  display: grid;\r\n  grid: 120px 120px 120px / 120px 120px 120px;\r\n  background-color:#a454bc;\r\n  gap: 5px;\r\n  width: calc(3 * 120px + 2 * 5px);\r\n  height: calc(3 * 120px + 2 * 5px);\r\n`","import React from \"react\";\r\nimport Square from \"../Square\";\r\nimport { BoardRow } from \"./board-styles-components\";\r\n\r\ninterface boardPropType {\r\n  squares: string[];\r\n  handleSquareClick: (index: number) => void;\r\n  indexes: number[];\r\n}\r\n\r\nconst Board = ({ squares, handleSquareClick, indexes }: boardPropType) => (\r\n  <BoardRow>\r\n    {squares &&\r\n      squares.map((value, index) => (\r\n        <Square\r\n          isWinnerSquare={indexes.includes(index)}\r\n          value={value}\r\n          key={index}\r\n          handleSquareClick={() => handleSquareClick(index)}\r\n        />\r\n      ))}\r\n  </BoardRow>\r\n);\r\n\r\nexport default Board;\r\n","import styled from \"styled-components\";\r\n\r\nexport const GameContainer = styled.div\r\n    `\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 45px;\r\n    width: 50%;\r\n    margin : auto;\r\n`\r\n\r\nexport const StatusOfCurrentPlayer = styled.div\r\n    `\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    `\r\n\r\nexport const ChangePlayer = styled.div\r\n    `\r\n    margin-top: 35px;\r\n    justify-self: flex-end;\r\n    text-align: right;\r\n    `\r\n\r\nexport const ChangePlayerButton = styled.a\r\n    `\r\n  font-size: 15px;\r\n  color: #a3a1ae;\r\n  padding: 10px;\r\n  width: calc(25% - 20px);\r\n  text-align: center;\r\n  text-decoration: none;\r\n  border: 1px solid #0099ff;\r\n    `\r\n\r\nexport const BoardContainer = styled.div\r\n    `\r\n  display: flex;\r\n  gap: 20px;\r\n  background-color: #525d7d;\r\n  padding: 25px;\r\n  border-radius: 2px;\r\n`\r\n\r\nexport const ModalContainer = styled.div\r\n    `\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100vh;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgb(10, 10, 10, .9);\r\n`\r\n\r\nexport const ModalContent = styled.div\r\n    `\r\n    width: 40%;\r\n    margin: auto;\r\n    background-color: #fff;\r\n    padding: 10px 15px;\r\n`\r\n\r\nexport const ScoreContainer = styled.div\r\n    `\r\n    margin-right: 45px;\r\n`\r\n\r\nexport const ScoreTitle = styled.h4\r\n    `\r\n    margin: 0;\r\n    color: #a3a1ae;\r\n    `\r\n\r\nexport const ScoreParagraph = styled.p\r\n    `\r\n    color: #a3a1ae;\r\n    font-weight: bold;\r\n`\r\n\r\nexport const CongratulationMessage = styled.div\r\n    `\r\n    color: #a3a1ae;\r\n    font-weight: bold;\r\n`\r\n\r\nexport const ModalFooter = styled.div\r\n    `\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin-top: 25px;\r\n`\r\n\r\nconst ModalButtons = styled.button\r\n    `\r\n    outline: none;\r\n    border: none;\r\n    font-size: 15px;\r\n    color: white;\r\n    padding: 10px;\r\n    width: 25%;\r\n    cursor: pointer;\r\n`\r\n\r\nexport const ContinueButton = styled(ModalButtons)\r\n    `\r\n    background-color: #0099ff;\r\n`\r\n\r\nexport const ResetButton = styled(ModalButtons)\r\n`\r\nbackground-color: #ddd;\r\n`\r\n\r\nexport const QuitButton = styled.a\r\n`\r\nbackground-color: red;\r\n  font-size: 15px;\r\n  color: white;\r\n  padding: 10px;\r\n  width: calc(25% - 20px);\r\n  text-align: center;\r\n  text-decoration: none;\r\n`\r\n","import {\r\n  CongratulationMessage,\r\n  ContinueButton,\r\n  ModalContainer,\r\n  ModalContent,\r\n  ModalFooter,\r\n  QuitButton,\r\n  ResetButton,\r\n} from \"./Game-styled-components\";\r\n\r\ninterface modalPropType {\r\n  winnerName: string | null;\r\n  handleContinueClick: () => void;\r\n  handleResetClick: () => void;\r\n}\r\n\r\nconst Modal = ({\r\n  winnerName,\r\n  handleContinueClick,\r\n  handleResetClick,\r\n}: modalPropType) => {\r\n  return (\r\n    <ModalContainer>\r\n      <ModalContent>\r\n        <div>\r\n          <h2>Message</h2>\r\n          <hr />\r\n        </div>\r\n        <div className='modal-body'>\r\n          <CongratulationMessage>\r\n            Congratulations to {winnerName}!\r\n          </CongratulationMessage>\r\n        </div>\r\n        <ModalFooter>\r\n          <ContinueButton onClick={handleContinueClick}>\r\n            Continue\r\n          </ContinueButton>\r\n          <ResetButton onClick={handleResetClick}>Reset</ResetButton>\r\n          <QuitButton href='/' className='btn-quit'>\r\n            Quit\r\n          </QuitButton>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </ModalContainer>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { useAppSelector } from \"../../app/hooks\";\r\nimport { selector } from \"../../features/Selector\";\r\nimport {\r\n  ScoreContainer,\r\n  ScoreParagraph,\r\n  ScoreTitle,\r\n} from \"./Game-styled-components\";\r\n\r\ninterface scoreBoardPropType {\r\n  scoreOfPlayer1: number;\r\n  scoreOfPlayer2: number;\r\n}\r\n\r\nconst ScoreBoard = ({ scoreOfPlayer1, scoreOfPlayer2 }: scoreBoardPropType) => {\r\n  const data = useAppSelector(selector);\r\n  const {\r\n    playerName: { playerName },\r\n  } = data;\r\n  return (\r\n    <ScoreContainer>\r\n      <ScoreTitle>Score</ScoreTitle>\r\n      <ScoreParagraph>Player 1: {scoreOfPlayer1}</ScoreParagraph>\r\n      <ScoreParagraph>\r\n        {playerName}: {scoreOfPlayer2}\r\n      </ScoreParagraph>\r\n    </ScoreContainer>\r\n  );\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import { usePlayerName } from \"../../app/CustomHooks/usePlayerName\";\r\nimport { useWinner } from \"../../app/CustomHooks/useWinner\";\r\nimport {\r\n  resetIsNext,\r\n  setIsModal,\r\n  setIsNext,\r\n  squareData,\r\n} from \"../../features/Actions\";\r\nimport Board from \"../Board\";\r\nimport {\r\n  BoardContainer,\r\n  ChangePlayer,\r\n  ChangePlayerButton,\r\n  GameContainer,\r\n  StatusOfCurrentPlayer,\r\n} from \"./Game-styled-components\";\r\nimport Modal from \"./modal\";\r\nimport ScoreBoard from \"./scoreBoard\";\r\n\r\nconst Game = () => {\r\n  //Create my own customer hook\r\n  const data = useWinner();\r\n  //Get my data\r\n  const {\r\n    isModal,\r\n    scoreOfPlayer1,\r\n    scoreOfPlayer2,\r\n    setScoreOfPlayer1,\r\n    setScoreOfPlayer2,\r\n    squares,\r\n    winner,\r\n    winnerName,\r\n    dispatch,\r\n    currentPlayerValue,\r\n    indexes,\r\n    currentPlayerName,\r\n  } = data;\r\n\r\n  //dispatch the name of the second user.\r\n  usePlayerName(dispatch);\r\n\r\n  //Handle square Btn\r\n  const handleSquareClick = (index: number) => {\r\n    //slice my array everytime is clicked\r\n    const currentSquare = squares.slice();\r\n    //dont do anything if winner is null || user click in the same btn\r\n    if (winner || currentSquare[index]) return;\r\n    //set value in array. I mean set 'X' or 'O'\r\n    currentSquare[index] = currentPlayerValue;\r\n    //dispatch current square\r\n    dispatch(squareData(currentSquare));\r\n    //dispatch the state of IsNext\r\n    dispatch(setIsNext());\r\n  };\r\n\r\n  const handleContinueClick = () => {\r\n    //reset all squares for starting a new game\r\n    dispatch(squareData(Array(9).fill(null)));\r\n    //set the opposite. I mean if is true set false and so\r\n    dispatch(setIsModal());\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    //reset All\r\n    dispatch(squareData(Array(9).fill(null)));\r\n    dispatch(setIsModal());\r\n    setScoreOfPlayer1(0);\r\n    setScoreOfPlayer2(0);\r\n    dispatch(resetIsNext(true));\r\n  };\r\n\r\n  return (\r\n    <GameContainer>\r\n      <StatusOfCurrentPlayer>\r\n        <h4>Next Player: </h4>\r\n        <span>{currentPlayerName}</span>\r\n      </StatusOfCurrentPlayer>\r\n      <BoardContainer>\r\n        <Board\r\n          indexes={indexes}\r\n          squares={squares}\r\n          handleSquareClick={handleSquareClick}\r\n        />\r\n        <ScoreBoard\r\n          scoreOfPlayer1={scoreOfPlayer1}\r\n          scoreOfPlayer2={scoreOfPlayer2}\r\n        />\r\n      </BoardContainer>\r\n      <ChangePlayer>\r\n        <ChangePlayerButton href='/'>Change player</ChangePlayerButton>\r\n      </ChangePlayer>\r\n      {isModal && (\r\n        <Modal\r\n          winnerName={winnerName}\r\n          handleContinueClick={handleContinueClick}\r\n          handleResetClick={handleResetClick}\r\n        />\r\n      )}\r\n    </GameContainer>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import { useEffect } from \"react\";\r\nimport { setPlayerName } from \"../../features/Actions\";\r\nimport { AppDispatch } from \"../store\";\r\n\r\nexport const usePlayerName = (dispatch : AppDispatch) => {\r\n    useEffect(() => {\r\n        let getPlayerNameInLocalStorate = localStorage?.getItem(\"playerName\");\r\n        dispatch(setPlayerName(getPlayerNameInLocalStorate));\r\n      }, [dispatch]);\r\n}","import styled from \"styled-components\";\r\n\r\nexport const HomeContainer = styled.div\r\n    `\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n`\r\n\r\nexport const HomeContent = styled.div\r\n    `\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nexport const Select = styled.select\r\n    `\r\n    padding: 8px;\r\n    background-color: #525d7d;\r\n    border: none;\r\n    color: #a3a1ae;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    margin: 15px 0;\r\n    border-radius: 2px;\r\n    -webkit-box-shadow: 5px 5px 14px 8px rgba(0, 0, 0, 0.14);\r\n    box-shadow: 5px 5px 14px 8px rgba(0, 0, 0, 0.14);\r\n`\r\n\r\nexport const SelectBtnContainer = styled.div\r\n    `\r\n    text-align: center;\r\n`\r\n\r\nexport const SelectButton = styled.button\r\n`\r\n  font-size: 18px;\r\n  width: max-content;\r\n  padding: 10px 45px;\r\n  border-radius: 2px;\r\n  cursor: pointer;\r\n  background-color: #414159;\r\n  outline: none;\r\n  border: none;\r\n  color: #a3a1ae;\r\n  -webkit-box-shadow: 5px 5px 14px 8px rgba(0, 0, 0, 0.14);\r\n  box-shadow: 5px 5px 14px 8px rgba(0, 0, 0, 0.14);\r\n`","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle\r\n    `\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n          'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n          sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n      }\r\n      \r\n      code {\r\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n          monospace;\r\n      }\r\n      \r\n    `","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter, Switch } from \"react-router-dom\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Game from \"./components/Game\";\nimport Home from \"./components/Home/home\";\nimport { GlobalStyle } from \"./GlobalStyle\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/Game' component={Game} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { useState } from \"react\";\r\nimport {\r\n  HomeContainer,\r\n  HomeContent,\r\n  Select,\r\n  SelectBtnContainer,\r\n  SelectButton,\r\n} from \"./home-styled-components\";\r\n\r\nexport default function Home({ history }: any) {\r\n  const [name, setName] = useState(\"Player 2\");\r\n\r\n  const handleSubmitPlayerName = () => {\r\n    localStorage.setItem(\"playerName\", name);\r\n    setTimeout(() => {\r\n      history.push(\"/Game\");\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <HomeContainer>\r\n      <HomeContent>\r\n        <label htmlFor='playerName'>Which name would you prefer to use?</label>\r\n        <Select\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          id='playerName'\r\n        >\r\n          <option value='Player 2'>Player 2</option>\r\n          <option value='Player 3'>Player 3</option>\r\n          <option value='Player 4'>Player 4</option>\r\n          <option value='Player 5'>Player 5</option>\r\n          <option value='Player 6'>Player 6</option>\r\n        </Select>\r\n        <SelectBtnContainer>\r\n          <SelectButton onClick={handleSubmitPlayerName}>Select</SelectButton>\r\n        </SelectBtnContainer>\r\n      </HomeContent>\r\n    </HomeContainer>\r\n  );\r\n}\r\n"],"sourceRoot":""}